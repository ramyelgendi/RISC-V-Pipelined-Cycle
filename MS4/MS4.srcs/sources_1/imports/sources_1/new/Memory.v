`timescale 1ns / 1ps

module Memory#(parameter n = 32)(input sclk,input MemRead, input MemWrite, input [7:0] addr, input [n-1:0] data_in,input[2:0]func3, output reg [n-1:0] data_out );

reg [7:0] mem [0:(4*1024-1)];                                       
integer i;
wire [7:0] addr1 =addr ;
wire [7:0] addr2 =addr +1;
wire  [7:0]addr3 =addr +2;
wire  [7:0]addr4 =addr +3;
initial begin 
for (i=0; i< (4*1024-1);  i=i+1 )
    mem[i] =0;
end                             
always @(*) begin    
//INSTRUCTION MEMORY                   
//R and I
{mem[3],mem[2],mem[1], mem[0]}= 32'b00000000000000000000000000000000; //nop
{mem[7],mem[6],mem[5], mem[4]}= 32'b00000000100000000010000010000011; //lw x1, 8(x0)      
{mem[11],mem[10],mem[9], mem[8]}= 32'b00000000000000000010001000000011; //lw x4, 0(x0)      
{mem[15],mem[14],mem[13], mem[12]}= 32'b00000000010000000010001110000011; //lw x7, 4(x0)           
{mem[19],mem[18],mem[17], mem[16]}= 32'b00000000000000000001001000110111; //lui x4,1 
//{mem[23],mem[22],mem[21], mem[20]}= 32'b01000000000100010000000110110011; //sub x3, x2, x1    
{mem[23],mem[22],mem[21], mem[20]} = 32'b00000000100000000000000011101111; //jal x1, 8
//{mem[27],mem[26],mem[25], mem[24]}= 32'b00000000100000010000000011100111; //jalr x1,x2,8
{mem[27],mem[26],mem[25], mem[24]}= 32'b00000000010000010100001010110011; //xor x5, x2, x4    
{mem[31],mem[30],mem[29], mem[28]}= 32'b00000000000100001110001100110011; //or x6, x1, x1     
{mem[35],mem[34],mem[33], mem[32]}= 32'b01000000100000001101010000110011; //sra x8, x1, x8    
{mem[39],mem[38],mem[37], mem[36]}= 32'b00000000000100010101010010110011; //srl x9, x2, x1    
{mem[43],mem[42],mem[41], mem[40]}=32'b00000000000100010011010100110011; //sltu x10, x2, x1  
{mem[47],mem[46],mem[45], mem[44]}=32'b00000000000100010001010110110011; //sll x11, x2, x1   
{mem[51],mem[50],mem[49], mem[48]}=32'b11111110110000001000001100010011; //addi x6, x1, -20  
{mem[55],mem[54],mem[53], mem[52]}= 32'b00000000011000001010001110110011; //slt x7, x1,x6     
{mem[59],mem[58],mem[57], mem[56]}= 32'b00000001001100010100001000010011; //xori x4, x2, 19   
{mem[63],mem[62],mem[61], mem[60]}= 32'b00000001100100010110001000010011; //ori x4, x2, 25    
{mem[67],mem[66],mem[65], mem[64]}= 32'b00000000110000000000000010000011; //lb x1, 12(x0)   
//{mem[67],mem[66],mem[65], mem[64]}= 32'b00000000100000010000000011100111; //jalr x1,x2,8
 
{mem[71],mem[70],mem[69], mem[68]}= 32'b0000001_00011_00101_000_01100_0110011 ; //mul x12, x5,x3 
//{mem[75],mem[74],mem[73], mem[72]}= 32'b0000001_00011_00011_101_00110_0110011;  //div x6, x3,x3 

//S and B
{mem[75],mem[74],mem[73], mem[72]}= 32'b00000000000100001000010001100011 ; //beq x1,x1,8
{mem[79],mem[78],mem[77], mem[76]}= 32'b00000000010000001001010001100011; //bne x1,x4,8
{mem[83],mem[82],mem[81], mem[80]}= 32'b00000000000100100100010001100011; //blt x4,x1,8
{mem[87],mem[86],mem[85], mem[84]}= 32'b00000000010000001101010001100011; //bge x1,x4,8
{mem[91],mem[90],mem[89], mem[88]}= 32'b00000000010000001111010001100011 ; //bgeu x1,x4,8
{mem[95],mem[94],mem[93], mem[92]}= 32'b00000000000100100110010001100011 ; //bltu x4,x1,8
{mem[99],mem[98],mem[97], mem[96]}= 32'b0000001_00011_00011_101_00110_0110011;  //div x6, x3,x3 
{mem[103],mem[102],mem[101], mem[100]}= 32'b00000000101000000010010000100011 ; //sw x10,8(x0)
{mem[107],mem[106],mem[105], mem[104]}= 32'b00000000000100000000011000100011 ; //sb x1, 12(x0)
{mem[111],mem[110],mem[109], mem[108]}= 32'b00000000011100000001100000100011 ; //sh x7, 16(x0) 
//U and I
//{mem[115],mem[114],mem[113], mem[112]}=32'b00000000000000000001001000010111 ; //auipc x4,1;
{mem[115],mem[114],mem[113], mem[112]}= 32'b00000000000000000001001000110111; //lui x4,1
{mem[119],mem[118],mem[117], mem[116]}= 32'b00000000000000000001001000010111 ; //auipc x4,1

//{mem[123],mem[122],mem[121], mem[120]}= 32'b00000000100000000000000011101111; //jal x1, 8
//comment at all times
//{mem[127],mem[126],mem[125], mem[124]}= 32'b00000000000000000000000001110011 ; //ecall
//{mem[131],mem[130],mem[129], mem[128]}=  32'b00000000000100000000000001110011;



//DATA MEMORY
{mem[219],mem[218],mem[217], mem[216]}=32'd5;
{mem[223],mem[222],mem[221], mem[220]}=32'd4;
{mem[227],mem[226],mem[225], mem[224]}=32'd25;
{mem[231],mem[230],mem[229], mem[228]}=32'd12;      
{mem[235],mem[234],mem[233], mem[232]}=32'd11;      
{mem[239],mem[238],mem[237], mem[236]}=32'd19;
end


assign check = mem[addr];
always @(*)
    begin
    if (sclk == 1)// inst meme
    //begin
    data_out = {mem[addr+3],mem[addr + 2],mem[addr +1],mem[addr]};
    //if (check[1:0] == 2'b11)
      //  C = 0;
    //else
     //   C =1;
   // end
  else if(sclk == 0) //data
  begin
  if (MemRead) //LOAD
                        begin
                        case(func3)
                        3'b000: //LB
                             data_out =  {{24{mem[addr+1][7]}},mem[addr ]};
                        3'b001: //LH
                             data_out =  {{16{mem[addr+1][7]}},mem[addr+1],mem[addr]};
                        3'b010: //LW
                               data_out =  {mem[addr+3],mem[addr + 2], mem[addr + 1],mem[addr ]};
                        3'b100: //LBU
                               data_out =  {24'b0,mem[addr]};
                        3'b101: //LHU
                              data_out =  {16'b0,mem[addr +1],mem[addr]};
                        endcase
                        end
               else
                  data_out= 32'b0;
                  end
     if (MemWrite)
                   begin
                   case(func3) //STORE
                   3'b000: //SB
                       mem[addr] = data_in[7:0];
                   3'b001: //SH
                       begin
                       mem[addr] = data_in[7:0];
                       mem[addr+1] = data_in[15:8];
                       end
                   3'b010: //SW
                       begin
                       mem[addr] = data_in[7:0];
                       mem[addr +1 ]  = data_in[15:8];
                       mem[addr  +2]  = data_in[23:16];
                       mem[addr +3]  = data_in[31:24];
                       end
                   endcase
                   end
              end
    
                        
endmodule
// 
//inst mem                                                                       
//$readmemh("C:/Users/Sabouzeid0.AUC.000/Desktop/machinecode.hex", mem);
//{mem[3],mem[2],mem[1], mem[0]}=32'b00000111010000000010000010000011 ; //lw x1,116(x0)
//{mem[7],mem[6],mem[5], mem[4]}=32'b00000111100000000010000100000011 ; //lw x2,120(x0)

//{mem[11],mem[10],mem[9], mem[8]} =32'b00001010000100000010101000100011 ; //sw x1,180(x0)
//{mem[15],mem[14],mem[13], mem[12]} = 32'b00001010001000000010110000100011; // sw x2,184(x0)
//{mem[19],mem[18],mem[17], mem[16]}=32'b00000111110000000000000110000011 ; //lb x3,124(x0)
//{mem[23],mem[22],mem[21], mem[20]}= 32'b00000000000100001000000100110011; //add x2, x1, x1
//{mem[27],mem[26],mem[25], mem[24]}= 32'b01000000100000001101010000110011; //sra x8, x1, x8 
////xor x4,x3,x2
//{mem[31],mem[30],mem[29], mem[28]}= 32'b00000000000100001110001100110011; //or x6, x1, x1
//{mem[35],mem[34],mem[33], mem[32]}= 32'b00000000000100010101010010110011; //srl x9, x2, x1
//{mem[39],mem[38],mem[37], mem[36]}= 32'b00000000000100010011010100110011; //sltu x10, x2, x1
//{mem[43],mem[42],mem[41], mem[40]}= 32'b00000000000100010001010110110011; //sll x11, x2, x1
//{mem[47],mem[46],mem[45], mem[44]}= 32'b11111110110000001000001100010011; //addi x6, x1, -20
//{mem[55],mem[54],mem[53], mem[52]}= 32'b00000001001100010100001000010011; //xori x4, x2, 19
//{mem[59],mem[58],mem[57], mem[56]}= 32'b00000001100100010110001000010011; //ori x4, x2, 25
//{mem[63],mem[62],mem[61], mem[60]}= 32'b00001010011000000000111000100011; //sb x6,188(x0)
//{mem[67],mem[66],mem[65], mem[64]}= 32'b00001100001000000001000000100011 ; //sh x2,192(x0)
//{mem[71],mem[70],mem[69], mem[68]}= 32'd0;
//{mem[75],mem[74],mem[73], mem[72]}= 32'b00000000010000001000001101100011; //beq x10, x7, 
//{mem[79],mem[78],mem[77], mem[76]}= 32'b00000000000100100001000001100011; //bne x4, x1, L1
//{mem[83],mem[82],mem[81], mem[80]}= 32'b00000000100001001101000001100011; //bge x9, x8, L1
//{mem[87],mem[86],mem[85], mem[84]}= 32'b00000000001100110100000001100011; //blt x6, x3, L1
//{mem[91],mem[90],mem[89], mem[88]}= 32'b00000000100001001111000001100011; //bgeu  x9, x8, L1
//{mem[95],mem[94],mem[93], mem[92]}= 32'b00000000001100110110000001100011; //bltu x6, x3, L1
////
//{mem[99],mem[98],mem[97], mem[96]} = 32'b00000000000001010000000100110111; //lui
//{mem[103],mem[102],mem[101], mem[100]} = 32'b00000000000000101000001010010111; //auipc
//{mem[107],mem[106],mem[105], mem[104]} = 32'b11111111100111111111000011101111; //jal 
////

//{mem[111],mem[110],mem[109], mem[108]}=32'b00000000000000000000000001110011 ; //ecall
//{mem[115],mem[114],mem[113], mem[112]}= 32'b00000000000100000000000001110011;

//datamem